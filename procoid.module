<?php

/**
 * Procurios Open ID implementation for SP.
 *
 * The module file contains generic functions and hooks. Code specific for
 * this module can be found in procoid.inc and the openid_connect plugin.
 */

/**
 * Implements hook_init().
 */
function procoid_init() {
  module_load_include("inc", "procoid", "procoid");
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function procoid_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openid_connect') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Pre authorize hook that runs before a user is authorized.
 *
 * @param array $tokens
 *   ID token and access token that we received as a result of the OpenID
 *   Connect flow.
 * @param object $account
 *   The user account if it exists, false if not.
 * @param array $userinfo
 *   The user claims returned by the OpenID Connect provider.
 * @param string $client_name
 *   The machine name of the OpenID Connect client plugin.
 *
 * @return bool
 *   TRUE if user should be logged into Drupal. FALSE if not.
 */
function procoid_openid_connect_pre_authorize($tokens, $account, $userinfo, $client_name) {
  // When mapped roles only are allowed to login.
  $mapped_role_only_login = variable_get('procoid_mapped_role_only_login', FALSE);
  if ($mapped_role_only_login) {
    // Only allow users with function mapped to role to login.
    $function_role_mapping = variable_get('procoid_function_role_mapping', array());

    foreach ($function_role_mapping as $role_id => $functions) {
      foreach ($userinfo['sp_custom/functions'] as $function_info) {
        if (in_array($function_info['id'], $functions)) {
          return TRUE;
        }
      }
    }

    // Block all others.
    drupal_set_message(t('You have no permission to login to this website'), 'error');
    return FALSE;
  }

  // Default allow login.
  return TRUE;
}

/**
 * Perform an action after a successful authorization.
 *
 * @param array $tokens
 *   ID token and access token that we received as a result of the OpenID
 *   Connect flow.
 * @param object $account
 *   The user account that has just been logged in.
 * @param array $userinfo
 *   The user claims returned by the OpenID Connect provider.
 * @param string $client_name
 *   The machine name of the OpenID Connect client plugin.
 * @param bool $is_new
 *   Whether the account has just been created via OpenID Connect.
 */
function procoid_openid_connect_post_authorize($tokens, $account, $userinfo, $client_name, $is_new) {
  drupal_set_message($is_new ? t('Welcome!') : t('Welcome back!'));
  if ($client_name !== 'procurios' || empty($userinfo['sp_custom/functions'])) {
    return;
  }

  // Store function information.
  foreach ($userinfo['sp_custom/functions'] as $function_info) {
    db_delete('procoid_function')
      ->condition('uid', $account->uid)
      ->execute();
    db_insert('procoid_function')
      ->fields(array(
        'uid' => $account->uid,
        'fid' => $function_info['id'],
        'function' => $function_info['title'],
        'did' => $function_info['departmentId'],
        'department' => $function_info['department'],
      ))
      ->execute();
  }

  // Update user roles.
  $function_role_mapping = variable_get('procoid_function_role_mapping', array());
  $user_roles_have_changed = FALSE;
  
  foreach ($function_role_mapping as $role_id => $functions) {
    $role = user_role_load($role_id);
    $user_has_role = FALSE;
    foreach ($userinfo['sp_custom/functions'] as $function_info) {
      if (in_array($function_info['id'], $functions)) {
        $user_has_role = TRUE;
        break;
      }
    }
    if ($user_has_role) {
      if (!isset($account->roles[$role->rid])) {
        $account->roles[$role->rid] = $role->name;
        $user_roles_have_changed = TRUE;
      }
    }
    elseif (isset($account->roles[$role->rid])) {
      unset($account->roles[$role->rid]);
      $user_roles_have_changed = TRUE;
    }
  }
  if ($user_roles_have_changed) {
    user_save($account);
  }
}

/**
 * Implements hook_form_alter().
 */
function procoid_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'openid_connect_login_form':
      // Override submit handler, need to add custom scope to get functions without adding disfunctional claim info.
      $form['#submit'] = array();
      $form['#submit'][] = 'procoid_openid_connect_login_form_submit';
      break;

    case 'openid_connect_admin_form':
      procoid_alter_openid_connect_admin_form($form, $form_state);
      break;
  }
}
